在Nginx部署项目后，假设当浏览器URL为172.1.2.3:7000/test ，刷新页面时，浏览器向服务器请求对应静态资源，Nginx按location /规则在dist文件夹找不到“test”文件，返回404。通过配置try_files $uri $uri/ /index.html; ，Nginx找不到资源时会重定向到index.html。页面刷新后，react-router或vue-router根据当前URL匹配并加载对应组件，解决刷新404问题。 

问题

1.为什么不是vue-router直接处理路由问题？
答：前端路由设计是基于应用在浏览器内的导航。只有在用户已加载完整的前端应用后，Vue Router 才能根据当前的URL加载对应的组件。

2.为什么重定向到index.html后就可以使用vue-router解决路由问题？
答：这里先解释下转发和重定向的区别
	转发：服务器内部操作，一次请求，地址栏 URL 不变
	重定向：服务器让浏览器重发请求，两次请求，地址栏 URL 更新为新地址
关键点
请求的处理顺序：

当你在浏览器中直接输入URL（如 172.1.2.3:7000/test）时，浏览器首先向Nginx发送请求，Nginx负责解析这个请求并看看该请求对应的文件。
如果Nginx的配置是 try_files $uri $uri/ /index.html;，Nginx会尝试依次查找 /test、/test/ 以及最后会找 index.html。如果 /test 资源不存在，Nginx会重定向到 index.html。
前端路由的初始化：

Vue Router 需要脚本和上下文来管理路由。在请求到达Nginx时，前端JavaScript代码还没有运行，因此它没有机会去处理当前的URL。重定向到 index.html后，浏览器会发起新的请求，这次是请求index.html，且此时Vue应用才会被加载。
当 index.html 加载后，Vue的JavaScript代码开始执行，此时vue-router才能获取到当前的URL并根据URL找到应渲染的组件。
前端路由的特性：

Vue Router 是基于客户端的路由，它并不处理服务器端请求。如果你直接请求 /test，而没有重定向到 index.html，服务器不会返回Vue应用的JavaScript代码，所以 vue-router 本身无法执行，也无法解析当前的URL。